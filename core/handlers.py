from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from .filters import IsContactFilter
from .keyboards import contact_reply_keyboard
from .querys import create_db, drop_db, search_user
from .settings import admin
from .states import StateRegistration


routers = {
    'main_router': Router(),
    'user_router': Router(),
}


# Run \ Stop
@routers['main_router'].startup()
async def run(bot: Bot) -> None:
    await create_db()
    await bot.send_message(admin, text='Run bot üëçüèª')


@routers['main_router'].shutdown()
async def stop(bot: Bot, dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await drop_db()
    await bot.send_message(admin, text='Stop bot üëéüèª')


# Handlers
@routers['user_router'].message(CommandStart())
async def start(message: Message, state: FSMContext, session):
    user_exist = await search_user(session, message.from_user.id)
    if user_exist:
        await message.answer('–û—Ñ—Ñ—Ñ!!! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        await state.clear()
        return await menu(message)

    await state.set_state(StateRegistration.PHONE)

    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProdMy!\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ –¥–ª—è –ø–æ—Ç–¥–µ—Ä–∂–¥–µ–Ω–∏—è:',
        reply_markup=contact_reply_keyboard(),
    )


@routers['user_router'].message(StateRegistration.PHONE, IsContactFilter())
async def contact(message: Message, state: FSMContext):
    await message.answer('–£—Ä–∞!!! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–µ–π!')
    await state.clear()
    return await menu(message=message)


@routers['user_router'].message(StateRegistration.PHONE)
async def fake_contact(message: Message):
    await message.answer('–û—à–∏–±–∫–∞! –ù–æ–º–µ—Ä –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.')


@routers['user_router'].message(Command(commands='menu'))
async def menu(message: Message):
    await message.answer('–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')


@routers['user_router'].message()
async def error(message: Message):
    await message.answer('–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')


def include_routers(dispatcher: Dispatcher):
    for key, value in routers.items():
        dispatcher.include_router(routers[key])
